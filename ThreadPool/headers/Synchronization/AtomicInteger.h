/*
 * This Code is edited by sun wukong @ 2015.12.16 15:44:08 CST 
 * 
 * Just feel free to use this code as you wish.
 * Any bug and ugly code, please notify me, thanks!
 *
 * Github https://githuc.com/maybe2009
 * Gmail  qtdssunwukong@gmail.com
 * 									-Auto Generated By UltiSnips
 */


#ifndef __OK_ATOMICINTEGER_INCLUDED__
#define __OK_ATOMICINTEGER_INCLUDED__
#include <stdint.h>

namespace ok{
/*********************************************************************** 
      Atomic Integer Template using gcc build-in __sync function set
************************************************************************/ 
template <typename T>
class AtomicInteger
{
public:
    AtomicInteger (T val) : data_(val){};
 
    T increment() {
        return __sync_add_and_fetch(&data_, 1);
    }

    T decrement() {
        return __sync_sub_and_fetch(&data_, 1);
    }
    
    T get() const {
        return __sync_val_compare_and_swap(
                 const_cast<volatile T*>(&data_), 0, 0); 
    }

    T addAndGet(T n) {
        return __sync_add_and_fetch(&data_, n);
    }
    
    T subAndGet(T n) {
        return __sync_sub_and_fetch(&data_, n);
    }    

    T getAndAdd(T n) {
        return __sync_fetch_and_add(&data_, n);
    }

    T getAndSub(T n) {
        return __sync_fetch_and_sub(&data_, n);
    }
    
private:
    volatile T data_;
};

typedef AtomicInteger<int64_t> AtomicInt64;
typedef AtomicInteger<int32_t> AtomicInt32;
typedef AtomicInteger<int16_t> AtomicInt16;
typedef AtomicInteger<int8_t>  AtomicInt8;
};//namespace ok
#endif /* ifndef __OK_ATOMICINTEGER_INCLUDED__ */

