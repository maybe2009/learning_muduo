/*
 * This Code is edited by sun wukong @ 2015.12.19 09:30:08 CST 
 * 
 * Just feel free to use this code as you wish.
 * Any bug and ugly code, please notify me, thanks!
 *
 * Github https://githuc.com/maybe2009
 * Gmail  qtdssunwukong@gmail.com
 * 									-Auto Generated By UltiSnips
 */

#ifndef OK_BLOCKINGQUEUE_INCLUDED
#define OK_BLOCKINGQUEUE_INCLUDED

#include <deque>
#include <boost/noncopyable.hpp>

#include "Condition.h"
#include "Mutex.h"

namespace ok{
template<typename T>
class BlockingQueue : public boost::noncopyable
{
public:
    BlockingQueue() 
        : mutex_(),
          cond_(mutex_),
          queue_()
    {}

    void put(T& product)
    {
        ScopeMutex lock(mutex_);

        queue_.push_back(product);
        cond_.signal();
    }

    T get()
    {
        ScopeMutex lock(mutex_);
        /*use while to prevent spurious wakeup*/
        while(queue_.empty()) {
            cond_.wait();
        }
        
        T ret(queue_.front());
        queue_.pop_front();
        return ret;
    }
    
    size_t size() const
    {
        ScopeMutex lock(mutex_);
        return queue_.size();
    }

private:
    mutable Mutex   mutex_;
    Condition       cond_;
    std::deque<T>   queue_;
};
};

#endif /* ifndef OK_BLOCKINGQUEUE_INCLUDED */

