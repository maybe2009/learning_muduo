/*
 * This Code is edited by sun wukong @ 2015.12.17 16:34:59 CST 
 * 
 * Just feel free to use this code as you wish.
 * Any bug and ugly code, please notify me, thanks!
 *
 * Github https://githuc.com/maybe2009
 * Gmail  qtdssunwukong@gmail.com
 * 									-Auto Generated By UltiSnips
 */

#ifndef AK_MUTEX_HPP
#define AK_MUTEX_HPP

#include <boost/noncopyable.hpp>
#include <pthread.h>

/*********************************************************************** 
      class Mutex Declaraion
************************************************************************/ 
namespace ok{
class Mutex : public boost::noncopyable
{
public:
    Mutex();
public:
    inline int              tryLock();
    inline int              lock();
    inline int              unlock();
    inline pthread_mutex_t* get();
private:
    pthread_mutex_t      mutex; 
};

/*********************************************************************** 
      class Mutex Definition
************************************************************************/ 
inline Mutex::
Mutex()
{
    mutex = PTHREAD_MUTEX_INITIALIZER;
}

inline pthread_mutex_t* Mutex::
get()
{
    return &mutex;
}

inline int Mutex::
tryLock()
{
    return pthread_mutex_trylock(&mutex);
}

inline int Mutex::
lock()
{
    return pthread_mutex_lock(&mutex);
}

inline int Mutex::
unlock()
{
    return pthread_mutex_unlock(&mutex);
}

/*********************************************************************** 
      class ScopeMutex
************************************************************************/ 
class ScopeMutex : boost::noncopyable
{
public:
    explicit ScopeMutex(Mutex& mutex) : mutex_(mutex)
    {
        mutex_.lock();
    }

    ~ScopeMutex()
    {
        mutex_.unlock();
    }

private:
    Mutex& mutex_;
};

};
#endif /* ifndef AK_MUTEX_HPP */


